var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "chokidar", "./utils", "./server", "./Logger", "./logMessages", "lodash"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const chokidar_1 = __importDefault(require("chokidar"));
    const Utils = __importStar(require("./utils"));
    const server_1 = require("./server");
    const Logger_1 = require("./Logger");
    const logMessages_1 = require("./logMessages");
    const lodash_1 = require("lodash");
    const DEBOUNCE_MS = 300;
    let pushQueue = [];
    let watcher = undefined;
    const processQueue = lodash_1.debounce(() => {
        if (pushQueue.length > 0) {
            //dedupe pushes
            let toProcess = new Set(pushQueue.slice());
            pushQueue = [];
            toProcess.forEach(path => {
                let payloadPromise = Utils.parseFileNameParams(path);
                payloadPromise
                    .then(payload => {
                    const targetServer = process.env.SN_INSTANCE ||
                        Logger_1.logger.error("No server configured for push!") ||
                        "";
                    if (targetServer && payload) {
                        server_1.pushFile(targetServer, payload, true, true)
                            .then(result => {
                            logMessages_1.logFilePush(payload, result);
                        })
                            .catch(() => {
                            logMessages_1.logFilePush(payload, false);
                        });
                    }
                })
                    .catch(e => {
                    throw e;
                });
            });
        }
    }, DEBOUNCE_MS);
    function startWatching(directory) {
        watcher = chokidar_1.default.watch(directory);
        watcher.on("change", fileChanged);
    }
    exports.startWatching = startWatching;
    async function fileChanged(path) {
        pushQueue.push(path);
        processQueue();
    }
    function stopWatching() {
        if (watcher) {
            watcher.close();
        }
    }
    exports.stopWatching = stopWatching;
});
