var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "chalk"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const chalk_1 = __importDefault(require("chalk"));
    exports.log = console.log;
    function info(text) {
        console.info(chalk_1.default.blue(text));
    }
    exports.info = info;
    function error(text) {
        console.error(chalk_1.default.red(text));
    }
    exports.error = error;
    function warn(text) {
        console.warn(chalk_1.default.yellow(text));
    }
    exports.warn = warn;
    function success(text) {
        console.info(chalk_1.default.green(text));
    }
    exports.success = success;
    function scopeCheckMessage(scopeCheck) {
        let sScope = chalk_1.default.blue(scopeCheck.sessionScope);
        let mScope = chalk_1.default.blue(scopeCheck.manifestScope);
        console.error(chalk_1.default.red(`Your user's scope is set to ${sScope} but this project is configured for the ${mScope} scope. Please switch scopes in ServiceNow to continue.`));
    }
    exports.scopeCheckMessage = scopeCheckMessage;
    function devModeLog() {
        console.log(`Dev mode started! Watching for changes...[${chalk_1.default.red("Press CTRL-C to Stop")}]\n`);
    }
    exports.devModeLog = devModeLog;
    function logFilePush(context, success, err) {
        let label = chalk_1.default.bold.blue;
        console.log(chalk_1.default.underline("File Push Summary"));
        console.log(label("When:\t"), new Date().toLocaleTimeString());
        console.log(label("Table:\t"), context.tableName);
        console.log(label("Record:\t"), context.name);
        console.log(label("Field:\t"), context.targetField);
        let status = chalk_1.default.green("Pushed üëç");
        if (!success) {
            status = chalk_1.default.red("Failed to push üëé");
        }
        console.log(label("Status:\t"), status);
        if (err) {
            console.log(err);
        }
        spacer();
    }
    exports.logFilePush = logFilePush;
    function logMultiFilePush(files, success, err) {
        if (success) {
            let fileNum = chalk_1.default.bold.blue(files.length + "");
            let message = chalk_1.default.green(`${fileNum} files successfully pushed to server`);
            console.info(message);
        }
        else {
            error("Failed to push files to server");
            if (err) {
                console.error(err);
            }
        }
        spacer();
    }
    exports.logMultiFilePush = logMultiFilePush;
    function spacer() {
        console.log("");
    }
});
